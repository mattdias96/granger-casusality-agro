for(i in 1:4){
mean[i] <- forecast1$pred[i]
lb[i] <- forecast1$pred[i] - 1.96*forecast1$se[i]
ub[i] <- forecast1$pred[i] + 1.96*forecast1$se[i]
}
mean
lb
ub
V1 <- forecast1$pred[1:4]^2
year <- c("1985", "1986", "1987", "1988")
prediction_df <- data.frame(V1, year)
prediction_df$set <- "predicted"
library(ggplot2)
sun_data$set <- "train"
sun_data2$set <- "test"
sun_data <- rbind(sun_data, sun_data2)
sun_data$year <-  seq(1700, 1988, by=1)
#sun_data2 <- read.table("sunspot2.dat")
sun_data <- rbind(sun_data, prediction_df)
sun_data$year <- as.Date(sun_data$year)
sun_data$year
sun_data$year <- as.Date(sun_data$year, format = "%Y")
plot <- ggplot(sun_data, aes(x=year, y=V1)) +
geom_line()
plot
plot <- ggplot(sun_data, aes(x=year, y=V1, color = set)) +
geom_line()
plot
sun_data <- read.table("sunspot.dat")
sun_data_root <- sqrt(sun_data)
acf(sun_data_root)
pacf(sun_data_root)
ar2_sun_data <- arima(sun_data_root,order = c(2, 0, 0), method = "ML")
ar2_sun_data
forecast1=predict(ar2_sun_data, 4)
mean <- c()
ub <- c()
lb <- c()
for(i in 1:4){
mean[i] <- forecast1$pred[i]
lb[i] <- forecast1$pred[i] - 1.96*forecast1$se[i]
ub[i] <- forecast1$pred[i] + 1.96*forecast1$se[i]
}
mean
lb
ub
V1 <- forecast1$pred[1:4]^2
year <- c("1985", "1986", "1987", "1988")
prediction_df <- data.frame(V1, year)
prediction_df$set <- "predicted"
prediction$lower <- lb^2
V1 <- forecast1$pred[1:4]^2
year <- c("1985", "1986", "1987", "1988")
prediction_df <- data.frame(V1, year)
prediction_df$set <- "predicted"
prediction_df$lower <- lb^2
prediction_df$upper <- ub^2
library(ggplot2)
sun_data$set <- "train"
sun_data2$set <- "test"
sun_data <- rbind(sun_data, sun_data2)
sun_data$year <-  seq(1700, 1988, by=1)
#sun_data2 <- read.table("sunspot2.dat")
sun_data$lower <- 0
sun_data$upper <- 0
sun_data <- rbind(sun_data, prediction_df)
sun_data$year <- as.Date(sun_data$year, format = "%Y")
plot <- ggplot(sun_data, aes(x=year, y=V1, color = set)) +
geom_line()
plot
plot <- ggplot(sun_data, aes(x=year, y=V1, color = set)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper, alpha = 0.5))
plot
library(ggplot2)
sun_data$set <- "train"
sun_data2$set <- "test"
sun_data <- rbind(sun_data, sun_data2)
library(ggplot2)
#sun_data$set <- "train"
#sun_data2$set <- "test"
#sun_data <- rbind(sun_data, sun_data2)
#sun_data$year <-  seq(1700, 1988, by=1)
#sun_data2 <- read.table("sunspot2.dat")
#sun_data$lower <- 0
#sun_data$upper <- 0
#sun_data <- rbind(sun_data, prediction_df)
#sun_data$year <- as.Date(sun_data$year, format = "%Y")
plot <- ggplot(sun_data, aes(x=year, y=V1, color = set)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper, alpha = 0.5))
plot
library(ggplot2)
#sun_data$set <- "train"
#sun_data2$set <- "test"
#sun_data <- rbind(sun_data, sun_data2)
#sun_data$year <-  seq(1700, 1988, by=1)
#sun_data2 <- read.table("sunspot2.dat")
#sun_data$lower <- 0
#sun_data$upper <- 0
#sun_data <- rbind(sun_data, prediction_df)
#sun_data$year <- as.Date(sun_data$year, format = "%Y")
plot <- ggplot(sun_data, aes(x=year, y=V1, color = set)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper, alpha = 0.5))
plot
sun_data
sun_data <- read.table("sunspot.dat")
sun_data_root <- sqrt(sun_data)
acf(sun_data_root)
pacf(sun_data_root)
ar2_sun_data <- arima(sun_data_root,order = c(2, 0, 0), method = "ML")
ar2_sun_data
forecast1=predict(ar2_sun_data, 4)
mean <- c()
ub <- c()
lb <- c()
for(i in 1:4){
mean[i] <- forecast1$pred[i]
lb[i] <- forecast1$pred[i] - 1.96*forecast1$se[i]
ub[i] <- forecast1$pred[i] + 1.96*forecast1$se[i]
}
mean
lb
ub
V1 <- forecast1$pred[1:4]^2
year <- c("1985", "1986", "1987", "1988")
prediction_df <- data.frame(V1, year)
prediction_df$set <- "predicted"
prediction_df$lower <- lb^2
prediction_df$upper <- ub^2
library(ggplot2)
#sun_data$set <- "train"
#sun_data2$set <- "test"
#sun_data <- rbind(sun_data, sun_data2)
#sun_data$year <-  seq(1700, 1988, by=1)
#sun_data2 <- read.table("sunspot2.dat")
#sun_data$lower <- 0
#sun_data$upper <- 0
#sun_data <- rbind(sun_data, prediction_df)
#sun_data$year <- as.Date(sun_data$year, format = "%Y")
plot <- ggplot(sun_data, aes(x=year, y=V1, color = set)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper, alpha = 0.5))
plot
library(ggplot2)
sun_data$set <- "train"
sun_data2$set <- "test"
sun_data <- rbind(sun_data, sun_data2)
sun_data$year <-  seq(1700, 1988, by=1)
sun_data2 <- read.table("sunspot2.dat")
sun_data$lower <- 0
sun_data$upper <- 0
sun_data <- rbind(sun_data, prediction_df)
sun_data$year <- as.Date(sun_data$year, format = "%Y")
plot <- ggplot(sun_data, aes(x=year, y=V1, color = set)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper, alpha = 0.5))
plot
plot <- ggplot(sun_data, aes(x=year, y=V1, color = set)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper, alpha = 0.1))
plot
sun_data
plot <- ggplot(sun_data, aes(x=year, y=V1, color = set)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper, alpha = 0.01))
plot
broc <- read.csv("broc.csv")
broc$date <- as.Date(broc$date)
p <- ggplot(broc, aes(x = date, y = price)) +
geom_line()
p
d1 <- diff(broc$price, differences = 1)
plot(d1, type = 'l', main = 'd = 1')
d2 <- diff(broc$price, differences = 2)
plot(d2, type = 'l', main = 'd = 2')
d3 <- diff(broc$price, differences = 3)
plot(d3, type = 'l', main = 'd = 3')
acf(d1)
pacf(d1)
sarima_2_0_0 <- sarima(d1, 2, 0, 0) # AR(2) - Looks bad
sarima_0_0_1 <- sarima(d1, 0, 0, 1) # MA(1) - Looks bad
sarima_1_0_1 <- sarima(d1, 1, 0, 1) # ARMA(1,1)
sarima_2_0_0
sarima_0_0_1
sarima_1_0_1
sarima_2_0_0$AIC
sarima_0_0_1$AIC
sarima_1_0_1$AIC # Lowest
sarima_0_0_1$AICc
sarima_2_0_0$AICc
sarima_1_0_1$AICc # Lowest
sarima_0_0_1$BIC
sarima_2_0_0$BIC
sarima_1_0_1$BIC # Lowest
# Forecast for 2019 for MA(2)
forecast_MA2= sarima.for(d1, n.ahead = 12, 0, 1, 2)
# Forecast for 2019 for AR(1)
forecast_AR1= sarima.for(d1, n.ahead = 12, 1, 1, 0)
# Forecast for 2019 for ARMA(1,1)
forecast_ARMA11 = sarima.for(d1, n.ahead = 12, 1, 1, 1)
# True prices - How to undifference the prices from the prediction?
broc_test <- read.csv("broc_test.csv")
d1_test <- diff(broc_test$price, differences = 1)
forecast_MA2
forecast_MA2$pred
forecast_MA2$pred[282]
forecast_MA2$pred[:10]
forecast_MA2$pred[0:10]
forecast_MA2$pred[0:12]
d1_test
d1_test - forecast_MA2$pred[0:12]
d1_test
length(d1_test)
# Forecast for 2019 for MA(2)
forecast_MA2= sarima.for(broc$price, n.ahead = 12, 0, 1, 2)
# Forecast for 2019 for AR(1)
forecast_AR1= sarima.for(broc$price, n.ahead = 12, 1, 1, 0)
# Forecast for 2019 for ARMA(1,1)
forecast_ARMA11 = sarima.for(broc$price, n.ahead = 12, 1, 1, 1)
# True prices - How to undifference the prices from the prediction?
broc_test <- read.csv("broc_test.csv")
d1_test <- diff(broc_test$price, differences = 1)
length(forecast_MA2$pred)
length(d1_test)
length(broc_test)
length(broc_test$price)
length(broc_test$price) - forecast_MA2$pred[0:12]
broc_test$price
forecast_MA2$pred[0:12]
# True prices
broc$price
broc_test$price
# True prices
broc$price
forecast_MA2$pred
broc_test$price - forecast_MA2$pred
(broc_test$price - forecast_MA2$pred)^2
sum((broc_test$price - forecast_MA2$pred)^2)
# True prices
rmse_ma2 <-  sqrt(mean((broc_test$price - forecast_MA2$pred)^2))
mae_ma2 <-  mean(abs(broc_test$price - forecast_MA2$pred))
mape_ma2 <-  mean(((broc_test$price - forecast_MA2$pred)/(broc_test$price))*100)
rmse_ma2
mae_ma2
mape_ma2
# Forecast for 2019 for MA(2)
forecast_MA1= sarima.for(broc$price, n.ahead = 12, 0, 1, 1)
# Forecast for 2019 for AR(1)
forecast_AR2= sarima.for(broc$price, n.ahead = 12, 2, 1, 0)
# Forecast for 2019 for ARMA(1,1)
forecast_ARMA11 = sarima.for(broc$price, n.ahead = 12, 1, 1, 1)
# True prices - How to undifference the prices from the prediction?
broc_test <- read.csv("broc_test.csv")
d1_test <- diff(broc_test$price, differences = 1)
# True prices
rmse_ma1 <-  sqrt(mean((broc_test$price - forecast_MA1$pred)^2))
mae_ma1 <-  mean(abs(broc_test$price - forecast_MA1$pred))
mape_ma1 <-  mean(((broc_test$price - forecast_MA1$pred)/(broc_test$price))*100)
rmse_ar2 <-  sqrt(mean((broc_test$price - forecast_AR2$pred)^2))
mae_ar2 <-  mean(abs(broc_test$price - forecast_AR2$pred))
mape_ar2 <-  mean(((broc_test$price - forecast_AR2$pred)/(broc_test$price))*100)
rmse_arma11 <-  sqrt(mean((broc_test$price - forecast_ARMA11$pred)^2))
mae_arma11 <-  mean(abs(broc_test$price - forecast_ARMA11$pred))
mape_arma11 <- mean(((broc_test$price - forecast_ARMA11$pred)/(broc_test$price))*100)
rmse_ma1
rmse_ar2
rmse_arma11
mae_ma1
mae_ar2
mae_arma11
mape_ma1
mape_ar2
mape_arma11
# True prices
rmse_ma1 <-  sqrt(mean((broc_test$price - forecast_MA1$pred)^2))
mae_ma1 <-  mean(abs(broc_test$price - forecast_MA1$pred))
mape_ma1 <-  mean(abs((broc_test$price - forecast_MA1$pred)/(broc_test$price))*100)
rmse_ar2 <-  sqrt(mean((broc_test$price - forecast_AR2$pred)^2))
mae_ar2 <-  mean(abs(broc_test$price - forecast_AR2$pred))
mape_ar2 <-  mean(abs((broc_test$price - forecast_AR2$pred)/(broc_test$price))*100)
rmse_arma11 <-  sqrt(mean((broc_test$price - forecast_ARMA11$pred)^2))
mae_arma11 <-  mean(abs(broc_test$price - forecast_ARMA11$pred))
mape_arma11 <- mean(abs((broc_test$price - forecast_ARMA11$pred)/(broc_test$price))*100)
rmse_ma1
rmse_ar2
rmse_arma11
mae_ma1
mae_ar2
mae_arma11
mape_ma1
mape_ar2
mape_arma11
library(MARSS)
data("varve")
n_obs <- length(varve)
y <- log(varve) # work on the log scale
model <- list(
B = matrix("phi"),
U = matrix(0),
Q = matrix("sigma_square_w"),
Z = matrix("a"),
A = matrix(0),
R = matrix("sigma_square_v"),
x0 = matrix("mu"),
tinitx = 0
)
fit <- MARSS(c(y), model = model)
kf <- MARSSkfss(fit)
models <- list(
# Setting sig_sq_hat_v = 0.05
list(
B=matrix(coef(fit)$B[1, 1]), U=matrix(0), Q=matrix(coef(fit)$Q[1, 1]),
Z=matrix(coef(fit)$Z[1, 1]), A=matrix(0), R=matrix(0.05),
x0=matrix(coef(fit)$x0[1, 1]), tinitx=0
),
# Setting sig_sq_hat_v = 0.5
list(
B=matrix(coef(fit)$B[1, 1]), U=matrix(0), Q=matrix(coef(fit)$Q[1, 1]),
Z=matrix(coef(fit)$Z[1, 1]), A=matrix(0), R=matrix(0.5),
x0=matrix(coef(fit)$x0[1, 1]), tinitx=0
)
)
# Plot with six panels
par(mfrow = c(2, 3))
par(mar = rep(2, 4))
# Plot the first 50 observations
subsequence <- 1:50
for (model in models) {
fit.mod <- MARSS(c(y), model=model, silent=TRUE)
# Get Kalman filter, predictor and smoother
kf.mod <- MARSSkfss(fit.mod)
plot(c(y)[subsequence],
main = "Kalman Predictions", xlab = "Time", ylab = "y",
col = "darkgray", type = "b", pch = 16, lty = 1)
lines(c(kf[["xtt1"]]), col = "black", lwd = 2)
lines(c(kf[["xtt1"]]) - c(sqrt(kf[["Vtt1"]])), col = "black", lwd = 2, lty = 3)
lines(c(kf[["xtt1"]]) + c(sqrt(kf[["Vtt1"]])), col = "black", lwd = 2, lty = 3)
lines(c(kf.mod[["xtt1"]]), col = "blue", lwd = 2)
lines(c(kf.mod[["xtt1"]]) - c(sqrt(kf.mod[["Vtt1"]])), col = "blue", lwd = 2, lty = 3)
lines(c(kf.mod[["xtt1"]]) + c(sqrt(kf.mod[["Vtt1"]])), col = "blue", lwd = 2, lty = 3)
plot(c(y)[sub],
main = "Kalman Filter", xlab = "Time", ylab = "y",
col = "darkgray", type = "b", pch = 16, lty = 1)
lines(c(kf[["xtt"]]), col = "black", lwd = 2)
lines(c(kf[["xtt"]]) - c(sqrt(kf[["Vtt"]])), col = "black", lwd = 2, lty = 3)
lines(c(kf.mod[["xtt"]]) + c(sqrt(kf[["Vtt"]])), col = "black", lwd = 2, lty = 3)
lines(c(kf.mod[["xtt"]]), col = "blue", lwd = 2)
lines(c(kf.mod[["xtt"]]) - c(sqrt(kf.mod[["Vtt"]])), col = "blue", lwd = 2, lty = 3)
lines(c(kf.mod[["xtt"]]) + c(sqrt(kf.mod[["Vtt"]])), col = "blue", lwd = 2, lty = 3)
plot(c(y)[sub], main = "Kalman Smoother", xlab = "Time", ylab = "y",
col = "darkgray", type = "b", pch = 16, lty = 1)
lines(c(fit$states), col = "black", lwd = 2)
lines(c(fit$states) - c(fit$states.se), col = "black", lwd = 2, lty = 3)
lines(c(fit$states) + c(fit$states.se), col = "black", lwd = 2, lty = 3)
lines(c(fit.mod$states), col = "blue", lwd = 2)
lines(c(fit.mod$states) - c(fit.mod$states.se), col = "blue", lwd = 2, lty = 3)
lines(c(fit.mod$states) + c(fit.mod$states.se), col = "blue", lwd = 2, lty = 3)
}
broc_test$price
broc_test$price
forecast_ARMA11$pred
broc_test$price
forecast_MA1$pred
forecast_AR2$pred
forecast_ARMA11$pred
plot(broc_test$prices)
plot(broc_test)
plot(broc_test$date, broc_test$price)
broc_test$price
broc_test$date
broc_test$date <- as.Date(broc_test$date)
plot(broc_test$date, broc_test$price)
plot(broc_test$date, broc_test$price, type = 'l)
plot(broc_test$date, broc_test$price, type = 'l')
broc_test$date <- as.Date(broc_test$date)
ggplot(aes(x = broc_test$date, y = broc_test$price)) +
geom_line()
broc_test$date <- as.Date(broc_test$date)
ggplot(broc_test, aes(x = date, y = price)) +
geom_line()
broc_test$date <- as.Date(broc_test$date)
broc_test$ma1 <-  forecast_MA1$pred
ggplot(broc_test, aes(date)) +
geom_line(aes(y = prices)) +
geom_line(aes(y = ma1))
broc_test$date <- as.Date(broc_test$date)
broc_test$ma1 <-  forecast_MA1$pred
ggplot(broc_test, aes(date)) +
geom_line(aes(y = price)) +
geom_line(aes(y = ma1))
broc_test$date <- as.Date(broc_test$date)
broc_test$ma1 <-  forecast_MA1$pred
broc_test$ma1 <-  forecast_AR2$pred
broc_test$ma1 <-  forecast_ARMA11$pred
ggplot(broc_test, aes(date)) +
geom_line(aes(y = price, color =  "actual")) +
geom_line(aes(y = ma1)) +
geom_line(aes(y = ar2)) +
geom_line(aes(y = arma11))
broc_test$date <- as.Date(broc_test$date)
broc_test$ma1 <-  forecast_MA1$pred
broc_test$ma1 <-  forecast_AR2$pred
broc_test$ma1 <-  forecast_ARMA11$pred
ggplot(broc_test, aes(date)) +
geom_line(aes(y = price)) +
geom_line(aes(y = ma1)) +
geom_line(aes(y = ar2)) +
geom_line(aes(y = arma11))
broc_test$date <- as.Date(broc_test$date)
broc_test$ma1 <-  forecast_MA1$pred
broc_test$ar2 <-  forecast_AR2$pred
broc_test$arma11 <-  forecast_ARMA11$pred
#broc_test_long <- melt(broc_test, )
ggplot(broc_test, aes(date)) +
geom_line(aes(y = price)) +
geom_line(aes(y = ma1)) +
geom_line(aes(y = ar2)) +
geom_line(aes(y = arma11))
broc_test$date <- as.Date(broc_test$date)
broc_test$ma1 <-  forecast_MA1$pred
broc_test$ar2 <-  forecast_AR2$pred
broc_test$arma11 <-  forecast_ARMA11$pred
#broc_test_long <- melt(broc_test, )
ggplot(broc_test, aes(date)) +
geom_line(aes(y = price, color = "Actual")) +
geom_line(aes(y = ma1)) +
geom_line(aes(y = ar2)) +
geom_line(aes(y = arma11))
broc_test$date <- as.Date(broc_test$date)
broc_test$ma1 <-  forecast_MA1$pred
broc_test$ar2 <-  forecast_AR2$pred
broc_test$arma11 <-  forecast_ARMA11$pred
#broc_test_long <- melt(broc_test, )
ggplot(broc_test, aes(date)) +
geom_line(aes(y = price, color = "Actual")) +
geom_line(aes(y = ma1, color = "MA1")) +
geom_line(aes(y = ar2, color = "AR2")) +
geom_line(aes(y = arma11, color = "ARMA11"))
acf(d1)
pacf(d1)
seq_list <- seq(10, 300, by=10)
ar1 <- c()
ar2 <- c()
for(i in 1:30){
print(i)
x_fit_mle <- arima(head(cmort, seq_list[i]),order = c(2, 0, 0), method = "ML")
x_fit_CSS <- arima(head(cmort, seq_list[i]),order = c(2, 0, 0), method = "CSS")
print(x_fit_mle$coef["ar1"])
# How to do CLS estimation?
ar1[i] <- abs(x_fit_mle$coef["ar1"] - x_fit_CSS$coef["ar1"])
ar2[i] <- abs(x_fit_mle$coef["ar2"] - x_fit_CSS$coef["ar2"])
}
plot(seq_list, ar1)
plot(seq_list, ar2)
data(cmort)
library(astsa)
data("cmort")
seq_list <- seq(10, 300, by=10)
ar1 <- c()
ar2 <- c()
for(i in 1:30){
print(i)
x_fit_mle <- arima(head(cmort, seq_list[i]),order = c(2, 0, 0), method = "ML")
x_fit_CSS <- arima(head(cmort, seq_list[i]),order = c(2, 0, 0), method = "CSS")
print(x_fit_mle$coef["ar1"])
# How to do CLS estimation?
ar1[i] <- abs(x_fit_mle$coef["ar1"] - x_fit_CSS$coef["ar1"])
ar2[i] <- abs(x_fit_mle$coef["ar2"] - x_fit_CSS$coef["ar2"])
}
plot(seq_list, ar1)
plot(seq_list, ar2)
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("vars")
setwd("~/")
data <- read.csv('all_stationary_data.csv')
data <- read.csv('all_stationary_data.csv')
setwd("~/Stanford/Stats 207/Final Project/granger-casusality-agro/Data")
data <- read.csv('all_stationary_data.csv')
data <- read.csv('all_stationary_data.csv')
library(vars)
data <- read.csv('all_stationary_data.csv')
setwd("~/Stanford/Stats 207/Final Project/granger-casusality-agro/Data")
data <- read.csv('./all_stationary_data.csv')
data <- read.csv('./all_stationary_data.csv')
data <- read.csv('all_stationary_data.csv')
library(vars)
data <- read.csv('C:\Users\mathe\Documents\Stanford\Stats 207\Final Project\granger-casusality-agro\Data\all_stationary_data.csv')
library(vars)
data <- read.csv(r'C:\Users\mathe\Documents\Stanford\Stats 207\Final Project\granger-casusality-agro\Data\all_stationary_data.csv')
library(vars)
data <- read.csv('C:\Users\mathe\Documents\Stanford\Stats 207\Final Project\granger-casusality-agro\Data\all_stationary_data.csv')
library(vars)
data <- read.csv('\mathe\Documents\Stanford\Stats 207\Final Project\granger-casusality-agro\Data\all_stationary_data.csv')
library(vars)
data <- read.csv('mathe\Documents\Stanford\Stats 207\Final Project\granger-casusality-agro\Data\all_stationary_data.csv')
library(vars)
data <- read.csv('\Users\mathe\Documents\Stanford\Stats 207\Final Project\granger-casusality-agro\Data\all_stationary_data.csv')
library(vars)
data <- read.csv("\Users\mathe\Documents\Stanford\Stats 207\Final Project\granger-casusality-agro\Data\all_stationary_data.csv")
library(vars)
data <- read.csv("\\Users\mathe\Documents\Stanford\Stats 207\Final Project\granger-casusality-agro\Data\all_stationary_data.csv")
library(vars)
data <- read.csv("\\Users\\mathe\\Documents\\Stanford\\Stats 207\\Final Project\\granger-casusality-agro\\Data\\all_stationary_data.csv")
head(data)
VARselect(data)
data
head(data)
tail(data)
VARselect(data)
